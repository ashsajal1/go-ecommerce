basePath: /api/v1
definitions:
  api.LoginInput:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  api.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.Address:
    properties:
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      state:
        type: string
      street:
        type: string
      type:
        description: shipping or billing
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      zip_code:
        type: string
    type: object
  models.CartItem:
    properties:
      cart_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      subtotal:
        type: number
      updated_at:
        type: string
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      updated_at:
        type: string
    type: object
  models.Image:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_primary:
        type: boolean
      product_id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      discount:
        type: number
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      notes:
        type: string
      payment_id:
        type: string
      shipping_address:
        $ref: '#/definitions/models.Address'
      shipping_address_id:
        type: integer
      shipping_cost:
        type: number
      status:
        $ref: '#/definitions/models.OrderStatus'
      tax_amount:
        type: number
      total_amount:
        type: number
      tracking_number:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      price:
        description: Price at time of purchase
        type: number
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      subtotal:
        type: number
      updated_at:
        type: string
    type: object
  models.OrderStatus:
    enum:
    - pending
    - processing
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusProcessing
    - OrderStatusShipped
    - OrderStatusDelivered
    - OrderStatusCancelled
  models.Product:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/models.Image'
        type: array
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A modern e-commerce REST API built with Go and Gin.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-commerce API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/api.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Response'
      summary: Register a new user
      tags:
      - auth
  /cart:
    delete:
      consumes:
      - application/json
      description: Remove all items from the shopping cart
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Clear cart
      tags:
      - cart
    get:
      consumes:
      - application/json
      description: Get the current user's shopping cart with all items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Get user's cart
      tags:
      - cart
  /cart/items:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart
      parameters:
      - description: Cart item details
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.CartItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - cart
  /cart/items/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an item from the shopping cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update quantity of an item in the cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated cart item details
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.CartItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Update cart item
      tags:
      - cart
  /orders:
    get:
      consumes:
      - application/json
      description: Get all orders for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: List user's orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order from the user's cart
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Get order details
      tags:
      - orders
  /orders/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Cancel an order
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: New order status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get all products with optional filtering
      parameters:
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      - description: Minimum price
        in: query
        name: min_price
        type: number
      - description: Maximum price
        in: query
        name: max_price
        type: number
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product's details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update a product
      tags:
      - products
  /users/me:
    get:
      consumes:
      - application/json
      description: Get details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update details of the currently authenticated user
      parameters:
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      security:
      - BearerAuth: []
      summary: Update current user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
